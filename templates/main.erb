<%# Create a custom scope for evaluating ruby strings in hierarchy -%>
<%
  eval(scope.function_template(['resource_tree/common/cleanscope.rb']))
  clean = CleanScope.new(scope, compiler)
-%>

<%# Reject collections that are not in resource_tree::apply -%>
<%
  apply_collections = @allcollections.reject {|k,v|
    !(@allapply.include? k)
  }
-%>

<%# Evaluate any collections whose value is a string, -%>
<%# returning only the resulting collections. -%>
<%
  parsed_collections = apply_collections.map{|k,v|
    ((v.to_s == v) && clean.scope_eval(v)) || v
  }
-%>

<%# Deep merge first level of collections, -%>
<%# evaluating any resource types whose value is a string -%>
<%
  resources = parsed_collections.inject({}) {|a,b|
    a.merge(Hash[(a.keys & b.keys).map {|k| 
      [k,(((a[k].to_s == a[k]) && clean.scope_eval(a[k])) || a[k]).merge(((b[k].to_s == b[k]) && clean.scope_eval(b[k])) || b[k])] 
    }]).merge(b.reject {|k,v| 
      (a.keys & b.keys).include? k 
    })
  }
-%>

<%# Evaluate individual resources whose value is a string, -%>
<%# while reformatting each in resource_tree::resource syntax -%>
<%
  resources_by_type = resources.map {|k,v|
    Hash[(((v.to_s == v) && clean.scope_eval(v)) || v).map {|a,b| 
      [a, (((b.to_s == b) && clean.scope_eval(b)) || b)] 
    }.map {|a,b| 
      [ k+"-"+a,
        {
          "type" => k,
          "rt_before" => b.fetch("before", @defaults.fetch(k,{}).fetch("before",[])),
          "rt_subscribe" => b.fetch("subscribe", @defaults.fetch(k,{}).fetch("subscribe",[])),
          "rt_notify" => b.fetch("notify", b.fetch("rt_notify", @defaults.fetch(k,{}).fetch("notify",[]))),
          "rt_requires" => b.fetch("require", b.fetch("rt_requires", @defaults.fetch(k,{}).fetch("require",[]))),
          "rt_resources" => b.fetch("rt_resources",nil),
          "params" => {
            a => @defaults.fetch(k,{}).merge(b).reject {|x,y|
              ["rt_resources", "rt_requires", "rt_notify",
               "before", "notify", "subscribe", "require"].include? x 
            }
          }
        }
      ]
    }]
  }
-%>

<%# Merge hash of resources by type into a single -%>
<%# hash of resource_tree::resource objects -%>
<%=
  resources_by_type.flatten(1).inject({}) {|a,b|
    a.merge(b)
  }.to_yaml
%>
