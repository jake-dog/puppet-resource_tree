<%# Create a custom scope for evaluating ruby strings in hierarchy -%>
<%
  eval(scope.function_template(['resource_tree/common/cleanscope.rb']))
  clean = CleanScope.new(scope, compiler)
-%>

<%# Evaluate rt_resources if value is a string -%>
<% resources = (((@rt_resources.to_s == @rt_resources) && clean.scope_eval(@rt_resources)) || @rt_resources) -%>

<%# Evaluate individual resources whose value is a string, -%>
<%# while reformatting each in resource_tree::resource syntax -%>
<%
  defaults = scope.lookupvar("resource_tree::defaults")
  resources_by_type = resources.map {|k,v|
    Hash[(((v.to_s == v) && clean.scope_eval(v)) || v).map {|a,b| 
      [a, (((b.to_s == b) && clean.scope_eval(b)) || b)] 
    }.map {|a,b| 
      [ k+"-"+a,
        {
          "type" => k,
          "rt_before" => b.fetch("before", defaults.fetch(k,{}).fetch("before",[])),
          "rt_subscribe" => b.fetch("subscribe", defaults.fetch(k,{}).fetch("subscribe",[])),
          "rt_notify" => b.fetch("notify", b.fetch("rt_notify", defaults.fetch(k,{}).fetch("notify",[]))),
          "rt_requires" => [b.fetch("require", b.fetch("rt_requires", defaults.fetch(k,{}).fetch("require",[]))), @name],
          "rt_resources" => b.fetch("rt_resources",nil),
          "params" => {
            a => defaults.fetch(k,{}).merge(b).reject {|x,y|
              ["rt_resources", "rt_requires", "rt_notify",
               "before", "notify", "subscribe", "require"].include? x 
            }
          }
        }
      ]
    }]
  }
-%>

<%# Merge hash of resources by type into a single -%>
<%# hash of resource_tree::resource objects -%>
<%=
  resources_by_type.flatten(1).inject({}) {|a,b|
    a.merge(b)
  }.to_yaml
%>
