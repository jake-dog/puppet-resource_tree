<%# We need to create a clean scope to evaluate any strings -%>
<%# Variable collisions only seem to effect jruby. -%>
<%# Since we're resetting scope, we also add some convenience -%>
<%# methods, like hiera, hiera_hash, without the function_* -%>
<%# aliases.  We cannot use alias_method, nor do we support -%>
<%# ruby 1.8.7, so "scope" is passed in to preserve compatibility -%>
<%# with unaliased methods. Instance variables are also copied -%>
<%# over from scope, much like Puppet::Parser::TemplateWrapper. -%>
<%
  class CleanScope
    def scope_call(*params)
      scope.method(:"function_#{__callee__}").call(params)
    end

    define_method "hiera", instance_method(:scope_call)
    define_method "hiera_hash", instance_method(:scope_call)
    define_method "hiera_array", instance_method(:scope_call)

    def scope_eval(code)
      if !@clientcert
        scope.to_hash.each do |name, value|
          realname = name.gsub(/[^\w]/, "_")
          instance_variable_set("@#{realname}", value)
        end
      end

      instance_eval(code)
    end
    def initialize(scope)
      @__scope__ = scope
    end
    def scope
      @__scope__
    end
  end
  clean = CleanScope.new scope
-%>

<%# Evaluate rt_resources if value is a string -%>
<% resources = (((@rt_resources.to_s == @rt_resources) && clean.scope_eval(@rt_resources)) || @rt_resources) -%>

<%# Evaluate individual resources whose value is a string, -%>
<%# while reformatting each in resource_tree::resource syntax -%>
<%
  resources_by_type = resources.map {|k,v|
    Hash[(((v.to_s == v) && clean.scope_eval(v)) || v).map {|a,b| 
      [a, (((b.to_s == b) && clean.scope_eval(b)) || b)] 
    }.map {|a,b| 
      [ k+"-"+a,
        {
          "type" => k, 
          "rt_notify" => b.fetch("rt_notify",nil), 
          "rt_requires" => (b.fetch("rt_requires",[]) + [@name]).uniq,
          "rt_resources" => b.fetch("rt_resources",nil),
          "params" => {
            a => scope.lookupvar("resource_tree::defaults").fetch(k,{}).merge(b.reject {|x,y|
              ["rt_resources", "rt_requires", "rt_notify"].include? x 
            })
          }
        }
      ]
    }]
  }
-%>

<%# Merge hash of resources by type into a single -%>
<%# hash of resource_tree::resource objects -%>
<%=
  resources_by_type.flatten(1).inject({}) {|a,b|
    a.merge(b)
  }.to_yaml
%>